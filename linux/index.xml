<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1. Linux on Developer&#39;s Delight</title>
    <link>https://linuxias.github.io/linux/</link>
    <description>Recent content in 1. Linux on Developer&#39;s Delight</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 01 Jan 2020 23:15:54 +0900</lastBuildDate><atom:link href="https://linuxias.github.io/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[glibc] malloc, free mechanism</title>
      <link>https://linuxias.github.io/linux/theory/glibc_heap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxias.github.io/linux/theory/glibc_heap/</guid>
      <description>C언어로 프로그래밍 할 때, 동적메모리 사용을 위해 많이 사용하는 malloc()은 glibc 내에 구현되어 있고, UNIX multi-thread 환경을 고려하여 설계된 ptmalloc2를 기반으로 작성되었다.
어플리케이션 내의 메모리 할당/해제 동작원리는 간단하게 설명하면 다음과 같다.
어플리케이션에서 malloc() 함수 호출 시 처음 linux kernel에 가상메모리를 요청(brk 또는 mmap을 이용하여)하게 되고, 그 영역은 어플리케이션의 가상메모리에 매핑된다. 그 이후에 free()를 호출하여 해제된 메모리는 커널에 반환되는 것이 아닌 glibc 내에서 free-list 로 관리되고, 어플리케이션에서 재 요청시 관리하던 free-list에서 재 할당하게 된다.</description>
    </item>
    
  </channel>
</rss>
